// Code generated by goyacc -l -o generated.go parser.y. DO NOT EDIT.
package goyacc

import __yyfmt__ "fmt"

import (
	"ciri/src/token"
)

func setResult(l yyLexer, v []token.Token) {
	l.(*Lexer).Tokens = v
}

type yySymType struct {
	yys int
	St  string
	Fl  float64
	In  int
	Ch  byte
}

const CTE_F = 57346
const CTE_I = 57347
const VAR = 57348
const IF = 57349
const ELSE = 57350
const ID = 57351
const CTE_STRING = 57352
const INT_TYPE = 57353
const FLOAT_TYPE = 57354
const PROGRAM = 57355
const PRINT = 57356

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CTE_F",
	"CTE_I",
	"VAR",
	"IF",
	"ELSE",
	"ID",
	"CTE_STRING",
	"INT_TYPE",
	"FLOAT_TYPE",
	"PROGRAM",
	"PRINT",
	"':'",
	"';'",
	"','",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"'='",
	"'+'",
	"'-'",
	"'/'",
	"'*'",
	"'>'",
	"'<'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 92

var yyAct = [...]int{
	7, 62, 53, 46, 33, 9, 39, 47, 34, 44,
	43, 44, 43, 24, 42, 48, 42, 51, 52, 56,
	57, 54, 55, 74, 10, 37, 26, 37, 40, 41,
	40, 41, 31, 45, 72, 61, 25, 22, 8, 63,
	21, 82, 80, 50, 49, 58, 30, 59, 60, 20,
	4, 18, 2, 17, 12, 65, 66, 67, 19, 28,
	29, 11, 73, 68, 69, 70, 71, 75, 23, 44,
	43, 76, 77, 3, 42, 79, 6, 81, 32, 35,
	83, 38, 36, 78, 16, 15, 14, 13, 64, 27,
	5, 1,
}

var yyPact = [...]int{
	39, -1000, 64, 35, 70, 20, 52, -1000, 44, -1000,
	34, 23, 18, 44, -1000, -1000, -1000, -9, 16, 6,
	48, 52, -1000, -1000, 7, 7, 5, 28, -1000, -1000,
	-1000, 27, -1000, -10, -2, -1000, -6, 7, -1000, -1000,
	65, 65, -1000, -1000, -1000, 14, 22, -1000, -1000, 52,
	-1000, 7, 7, -1000, 7, 7, 7, 7, 13, -1000,
	-1000, 20, 2, 5, -1000, -1000, -1000, -1000, -2, -2,
	-1000, -1000, -1000, 67, 26, 22, -1000, -1000, 25, 20,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 91, 90, 0, 5, 24, 89, 88, 54, 87,
	86, 85, 84, 7, 83, 3, 1, 6, 82, 81,
	8, 79, 4, 2, 78,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 4, 5, 5, 7, 7, 3,
	8, 8, 9, 9, 9, 11, 14, 14, 10, 12,
	15, 15, 16, 16, 6, 6, 17, 17, 17, 18,
	18, 19, 19, 19, 20, 21, 21, 21, 22, 23,
	23, 23, 13, 24, 24, 24,
}

var yyR2 = [...]int{
	0, 5, 2, 0, 5, 1, 3, 1, 0, 3,
	2, 0, 1, 1, 1, 7, 2, 0, 4, 6,
	1, 1, 3, 0, 1, 1, 1, 1, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 3, 2, 3,
	3, 0, 1, 3, 3, 1,
}

var yyChk = [...]int{
	-1000, -1, 13, 9, 15, -2, 6, -3, 18, -4,
	-5, 9, -8, -9, -10, -11, -12, 9, 7, 14,
	15, 17, 19, -8, 22, 20, 20, -6, 11, 12,
	-5, -13, -24, -22, -20, -21, -18, 20, -19, -17,
	23, 24, 9, 5, 4, -13, -15, -13, 10, 16,
	16, 27, 28, -23, 23, 24, 25, 26, -13, -17,
	-17, 21, -16, 17, -7, -4, -22, -22, -20, -20,
	-20, -20, 21, -3, 21, -15, -23, -23, -14, 8,
	16, -16, 16, -3,
}

var yyDef = [...]int{
	0, -2, 0, 0, 3, 0, 0, 1, 11, 2,
	0, 5, 0, 11, 12, 13, 14, 0, 0, 0,
	0, 0, 9, 10, 0, 0, 0, 0, 24, 25,
	6, 0, 42, 45, 41, 34, 35, 0, 30, 31,
	0, 0, 26, 27, 28, 0, 23, 20, 21, 8,
	18, 0, 0, 38, 0, 0, 0, 0, 0, 32,
	33, 0, 0, 0, 4, 7, 43, 44, 41, 41,
	36, 37, 29, 17, 0, 23, 39, 40, 0, 0,
	19, 22, 15, 16,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	20, 21, 26, 23, 17, 24, 3, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 15, 16,
	28, 22, 27, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 18, 3, 19,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
